
Introduction
The Hypertext Transfer Protocol (HTTP) is an application protocol for distributed,
collaborative, hypermedia information systems.
HTTP is the foundation of data communication for the World Wide Web, where hypertext documents include hyperlinks to other resources that the user can easily access.
For example, by a mouse click or by tapping the screen in a web browser.
HTTP was developed to facilitate hypertext and the World Wide Web.
The primary function of a web server is to store, process, and deliver web pages to
clients. The communication between client and server takes place using the Hypertext
Transfer Protocol (HTTP).
Pages delivered are most frequently HTML documents, which may include images,
style sheets, and scripts in addition to the text content.
Multiple web servers may be used for a high-traffic website.
A user agent, commonly a web browser or web crawler, initiates communication by
requesting a specific resource using HTTP and the server responds with the content of
that resource or an error message if unable to do so. The resource is typically a real file
on the server’s secondary storage, but this is not necessarily the case and depends on how
the webserver is implemented.
While the primary function is to serve content, full implementation of HTTP also
includes ways of receiving content from clients. This feature is used for submitting web
forms, including the uploading of files.

소개
하이퍼텍스트 전송 프로토콜(HTTP)은 분산된 협업 하이퍼미디어 정보 시스템을 위한
협업형 하이퍼미디어 정보 시스템을 위한 애플리케이션 프로토콜입니다.
HTTP는 사용자가 쉽게 액세스할 수 있는 다른 리소스에 대한 하이퍼링크를 포함하는 월드와이드웹의 데이터 통신 기반입니다.
예를 들어, 마우스 클릭이나 웹 브라우저에서 화면을 탭하는 등의 방법으로 다른 리소스에 액세스할 수 있습니다.
HTTP는 하이퍼텍스트와 월드 와이드 웹을 용이하게 하기 위해 개발되었습니다.
웹 서버의 주요 기능은 웹 페이지를 저장, 처리, 클라이언트에게 전달하는 것입니다.
클라이언트. 클라이언트와 서버 간의 통신은 하이퍼텍스트 전송 프로토콜(HTTP)을 사용하여 이루어집니다.
전달되는 페이지는 대부분 HTML 문서이며 이미지를 포함할 수 있습니다,
스타일시트, 스크립트 등이 포함될 수 있으므로 텍스트 콘텐츠와 함께 전달됩니다.
트래픽이 많은 웹사이트에는 여러 웹 서버를 사용할 수 있습니다.
사용자 에이전트(일반적으로 웹 브라우저 또는 웹 크롤러)는 다음과 같은 방법으로 통신을 시작합니다.
HTTP를 사용하여 특정 리소스를 요청하면 서버는 해당 리소스의 콘텐츠 또는 오류 메시지로 응답합니다.
리소스 또는 리소스를 제공할 수 없는 경우 오류 메시지로 응답합니다. 리소스는 일반적으로 서버의 보조 저장소에 있는 실제 파일
이지만 반드시 그런 것은 아니며 웹서버가 어떻게 구현되었는지에 따라
웹서버가 구현되는 방식에 따라 다릅니다.
웹서버의 주요 기능은 콘텐츠를 제공하는 것이지만, HTTP의 완전한 구현에는 다음과 같은 기능도 포함됩니다.
클라이언트로부터 콘텐츠를 수신하는 방법도 포함됩니다. 이 기능은 웹 양식 제출에 사용됩니다.
양식을 제출하는 데 사용됩니다.





Requirements
• Your program has to take a configuration file as argument, or use a default path.
• You can’t execve another web server.
• Your server must never block and the client can be bounced properly if necessary.
• It must be non-blocking and use only 1 poll() (or equivalent) for all the I/O
operations between the client and the server (listen included).
• poll() (or equivalent) must check read and write at the same time.
• You must never do a read or a write operation without going through poll() (or
equivalent).
• Checking the value of errno is strictly forbidden after a read or a write operation.
• You don’t need to use poll() (or equivalent) before reading your configuration file.
Because you have to use non-blocking file descriptors, it is
possible to use read/recv or write/send functions with no poll()
(or equivalent), and your server wouldn’t be blocking.
But it would consume more system resources.
Thus, if you try to read/recv or write/send in any file descriptor
without using poll() (or equivalent), your grade will be 0.


요구 사항
- 프로그램은 구성 파일을 인수로 받거나 기본 경로를 사용해야 합니다.
- 다른 웹 서버를 실행할 수 없습니다.
- 서버는 절대로 차단해서는 안 되며 필요한 경우 클라이언트가 제대로 바운스될 수 있어야 합니다.
- 차단하지 않아야 하며 클라이언트와 서버 간의 모든 I/O에 대해 1개의 poll()(또는 이에 상응하는)만 사용해야 합니다.
  연산(수신 포함)에 대해 1개만 사용해야 합니다.
- poll()(또는 이와 동등한 함수)는 읽기와 쓰기를 동시에 확인해야 합니다.
- poll()(또는 이와 동등한 함수)를 거치지 않고 읽기 또는 쓰기 작업을 수행해서는 안 됩니다.
  동등한 함수를 거치지 않고는 절대로 읽기 또는 쓰기 작업을 수행해서는 안 됩니다.
- 읽기 또는 쓰기 작업 후 errno 값을 확인하는 것은 엄격히 금지되어 있습니다.
- 구성 파일을 읽기 전에 poll()(또는 이와 동등한 함수)를 사용할 필요는 없습니다.
차단하지 않는 파일 기술자를 사용해야 하므로
poll() 없이 읽기/받기 또는 쓰기/보내기 함수를 사용할 수 있습니다.
(또는 이와 동등한)이 없는 읽기/쓰기 또는 보내기 함수를 사용할 수 있으며 서버가 차단되지 않습니다.
하지만 시스템 리소스를 더 많이 소비하게 됩니다.
따라서 poll((또는 이와 동등한 기능)을 사용하지 않고 파일 설명자로 읽기/받기 또는 쓰기/전송을 시도하는 경우
(또는 이와 동등한 함수)를 사용하지 않고 읽기/쓰기/전송을 시도하면 등급이 0이 됩니다.




• You can use every macro and define like FD_SET, FD_CLR, FD_ISSET, FD_ZERO (understanding what and how they do it is very useful).
• A request to your server should never hang forever.
• Your server must be compatible with the web browser of your choice.
• We will consider that NGINX is HTTP 1.1 compliant and may be used to compare
headers and answer behaviors.
• Your HTTP response status codes must be accurate.
• You server must have default error pages if none are provided.
• You can’t use fork for something else than CGI (like PHP, or Python, and so forth).
• You must be able to serve a fully static website.
• Clients must be able to upload files.
• You need at least GET, POST, and DELETE methods.
• Stress tests your server. It must stay available at all cost.
• Your server must be able to listen to multiple ports (see Configuration file).

- 모든 매크로를 사용할 수 있으며 FD_SET, FD_CLR, FD_ISSET, FD_ZERO와 같이 정의할 수 있습니다(매크로가 무엇을 어떻게 수행하는지 이해하면 매우 유용합니다).
- 서버에 대한 요청이 영원히 중단되어서는 안 됩니다.
- 서버는 선택한 웹 브라우저와 호환되어야 합니다.
- NGINX는 HTTP 1.1을 준수하는 것으로 간주하여
헤더와 응답 동작을 비교하는 데 사용할 수 있습니다.
- HTTP 응답 상태 코드가 정확해야 합니다.
- 기본 오류 페이지가 제공되지 않는 경우 서버에 기본 오류 페이지가 있어야 합니다.
- CGI가 아닌 다른 것(예: PHP, Python 등)에 포크를 사용할 수 없습니다.
- 완전한 정적 웹사이트를 제공할 수 있어야 합니다.
- 클라이언트가 파일을 업로드할 수 있어야 합니다.
- 최소한 GET, POST, DELETE 메서드가 필요합니다.
- 서버에 대한 스트레스 테스트를 실시합니다. 서버는 항상 가용성을 유지해야 합니다.
- 서버가 여러 포트를 수신할 수 있어야 합니다(구성 파일 참조).

Since MacOS doesn’t implement write() the same way as other Unix
OSes, you are allowed to use fcntl().
You must use file descriptors in non-blocking mode in order to get a
behavior similar to the one of other Unix OSes.
However, you are only allowed to use fcntl() with the following
flags:
F_SETFL, O_NONBLOCK and FD_CLOEXEC.
Any other flag is forbidden


MacOS는 다른 Unix와 같은 방식으로 write()를 구현하지 않으므로
OS와 같은 방식으로 구현하지 않으므로 fcntl()을 사용할 수 있습니다.
다른 유닉스 OS와 유사한 동작을 얻으려면 비차단 모드에서 파일 기술자를 사용해야 합니다.
동작을 얻으려면 비차단 모드에서 파일 설명자를 사용해야 합니다.
그러나 다음과 같은 경우에만 fcntl()을 사용할 수 있습니다.
플래그:
F_SETFL, O_NONBLOCK 및 FD_CLOEXEC.
다른 플래그는 금지됩니다.


You can get some inspiration from the ’server’ part of NGINX
configuration file.
In the configuration file, you should be able to:
• Choose the port and host of each ’server’.
• Setup the server_names or not.
• The first server for a host:port will be the default for this host:port (that means
it will answer to all the requests that don’t belong to an other server).
• Setup default error pages.
• Limit client body size.
• Setup routes with one or multiple of the following rules/configuration (routes wont
be using regexp):
◦ Define a list of accepted HTTP methods for the route.
◦ Define a HTTP redirection.
◦ Define a directory or a file from where the file should be searched (for example,
if url /kapouet is rooted to /tmp/www, url /kapouet/pouic/toto/pouet is
/tmp/www/pouic/toto/pouet).
◦ Turn on or off directory listing.


NGINX의 '서버' 부분에서 영감을 얻을 수 있습니다.
구성 파일에서 영감을 얻을 수 있습니다.
구성 파일에서 다음을 수행할 수 있어야 합니다:
- 각 '서버'의 포트와 호스트를 선택합니다.
- server_names를 설정할지 여부를 설정합니다.
- 호스트:포트의 첫 번째 서버가 이 호스트:포트의 기본값이 됩니다.
다른 서버에 속하지 않는 모든 요청에 응답한다는 의미).
- 기본 오류 페이지를 설정합니다.
- 클라이언트 본문 크기를 제한합니다.
- 다음 규칙/구성 중 하나 또는 여러 개를 사용하여 경로를 설정합니다(경로에는
정규 표현식을 사용해야 합니다):
경로에 허용되는 HTTP 메소드 목록을 정의합니다.
HTTP 리디렉션을 정의합니다.
파일을 검색할 디렉토리 또는 파일을 정의합니다(예,
URL /kapouet이 /tmp/www에 루팅된 경우, URL /kapouet/pouic/toto/pouet은
/tmp/www/pouic/toto/pouet).
디렉토리 목록을 켜거나 끕니다.



Webserv This is when you finally understand why a URL starts with HTTP
◦ Set a default file to answer if the request is a directory.
◦ Execute CGI based on certain file extension (for example .php).
◦ Make it work with POST and GET methods.
◦ Make the route able to accept uploaded files and configure where they should
be saved.
∗ Do you wonder what a CGI is?
∗ Because you won’t call the CGI directly, use the full path as PATH_INFO.
∗ Just remember that, for chunked request, your server needs to unchunk
it, the CGI will expect EOF as end of the body.
∗ Same things for the output of the CGI. If no content_length is returned
from the CGI, EOF will mark the end of the returned data.
∗ Your program should call the CGI with the file requested as first argument.
∗ The CGI should be run in the correct directory for relative path file access.
∗ Your server should work with one CGI (php-CGI, Python, and so forth).
You must provide some configuration files and default basic files to test and demonstrate every feature works during evaluation.
If you’ve got a question about one behavior, you should compare your
program behavior with NGINX’s.
For example, check how does server_name work.
We’ve shared with you a small tester. It’s not mandatory to pass it
if everything works fine with your browser and tests, but it can help
you hunt some bugs.
The important thing is resilience. Your server should never die.
Do not test with only one program. Write your tests with a more
convenient language such as Python or Golang, and so forth. Even in
C or C++ if you want to.


URL이 HTTP로 시작하는 이유를 마침내 이해할 때입니다.
요청이 디렉토리인 경우 응답할 기본 파일을 설정합니다.
특정 파일 확장자(예: .php)를 기준으로 CGI를 실행합니다.
POST 및 GET 메서드와 함께 작동하도록 설정합니다.
업로드된 파일을 허용할 수 있는 경로를 설정하고 파일이 저장될 위치를 설정합니다.
저장할 위치를 설정합니다.
∗ CGI가 무엇인지 궁금하신가요?
∗ CGI를 직접 호출하지 않으므로 전체 경로를 PATH_INFO로 사용합니다.
∗ 청크 요청의 경우, 서버가 청크를 언청크해야 한다는 점만 기억하세요.
하지 않으면 CGI는 본문의 끝을 EOF로 예상합니다.
∗ CGI의 출력도 마찬가지입니다. CGI에서 content_length가 반환되지 않으면
가 반환되지 않으면, EOF는 반환된 데이터의 끝을 표시합니다.
∗ 프로그램은 요청된 파일을 첫 번째 인자로 사용하여 CGI를 호출해야 합니다.
∗ CGI는 상대 경로 파일 액세스를 위해 올바른 디렉토리에서 실행되어야 합니다.
∗ 서버는 하나의 CGI(php-CGI, Python 등)로 작동해야 합니다.
평가 중에 모든 기능이 작동하는지 테스트하고 시연할 수 있도록 몇 가지 구성 파일과 기본 기본 파일을 제공해야 합니다.
한 동작에 대한 질문이 있는 경우, 여러분의
프로그램 동작과 NGINX의 동작을 비교해야 합니다.
예를 들어 server_name이 어떻게 작동하는지 확인하세요.
작은 테스터를 공유해 드렸습니다. 반드시 통과해야 하는 것은 아닙니다.
브라우저와 테스트에서 모든 것이 정상적으로 작동한다면 반드시 통과해야 하는 것은 아니지만
도움이 될 수 있습니다.
